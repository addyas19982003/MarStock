@startuml "Diagramme de Séquence - Authentification et Gestion des Employés"

!theme plain
skinparam backgroundColor #FFFFFF
skinparam participant {
  BackgroundColor #E3F2FD
  BorderColor #2196F3
  FontColor #1565C0
}
skinparam actor {
  BackgroundColor #FFE0B2
  BorderColor #FF9800
  FontColor #E65100
}

title "Diagramme de Séquence - Authentification et Gestion des Employés"

actor "Utilisateur" as User
participant "LoginForm" as Login
participant "AuthProvider" as Auth
participant "AuthService" as AuthSvc
participant "AuthAPI" as API
participant "AuthMySQLService" as MySQL
participant "Database" as DB
participant "Dashboard" as Dashboard
participant "EmployeService" as EmpSvc
participant "EmployeClient" as EmpClient

== Authentification ==

User -> Login: Saisir email/password
Login -> Login: Valider les données
Login -> Auth: signIn(email, password)
Auth -> AuthSvc: signIn(email, password)
AuthSvc -> API: POST /api/auth/login
API -> MySQL: authenticateUser(email, password)
MySQL -> DB: SELECT user WHERE email = ?
DB --> MySQL: User data
MySQL -> MySQL: Vérifier password
MySQL -> DB: UPDATE last_login
MySQL --> API: User object
API --> AuthSvc: User response
AuthSvc --> Auth: User object
Auth -> Auth: setUser(user)
Auth -> Auth: localStorage.setItem()
Auth -> Dashboard: router.push('/dashboard')
Dashboard --> User: Afficher dashboard

== Gestion des Employés ==

User -> Dashboard: Cliquer "Gestion Employés"
Dashboard -> EmpClient: getAllEmployes()
EmpClient -> API: GET /api/employes
API -> EmpSvc: getAllEmployes()
EmpSvc -> DB: SELECT * FROM employes
DB --> EmpSvc: Employe[]
EmpSvc --> API: Employe[]
API --> EmpClient: Employe[]
EmpClient --> Dashboard: Employe[]
Dashboard --> User: Afficher liste employés

== Ajout d'un Employé ==

User -> Dashboard: Cliquer "Ajouter Employé"
Dashboard -> Dashboard: Ouvrir modal
User -> Dashboard: Remplir formulaire
User -> Dashboard: Soumettre formulaire
Dashboard -> EmpClient: createEmploye(data)
EmpClient -> API: POST /api/employes
API -> EmpSvc: createEmploye(data, userId)
EmpSvc -> DB: INSERT INTO employes
DB --> EmpSvc: New employe ID
EmpSvc -> DB: SELECT * FROM employes WHERE id = ?
DB --> EmpSvc: Employe object
EmpSvc --> API: Employe object
API --> EmpClient: Employe object
EmpClient --> Dashboard: Employe object
Dashboard -> Dashboard: Fermer modal
Dashboard -> Dashboard: Rafraîchir liste
Dashboard --> User: Afficher nouvel employé

== Modification d'un Employé ==

User -> Dashboard: Cliquer "Modifier"
Dashboard -> Dashboard: Ouvrir modal avec données
User -> Dashboard: Modifier données
User -> Dashboard: Sauvegarder
Dashboard -> EmpClient: updateEmploye(id, data)
EmpClient -> API: PUT /api/employes/[id]
API -> EmpSvc: updateEmploye(id, data)
EmpSvc -> DB: UPDATE employes SET ...
DB --> EmpSvc: Success
EmpSvc -> DB: SELECT * FROM employes WHERE id = ?
DB --> EmpSvc: Updated employe
EmpSvc --> API: Employe object
API --> EmpClient: Employe object
EmpClient --> Dashboard: Employe object
Dashboard -> Dashboard: Fermer modal
Dashboard -> Dashboard: Rafraîchir liste
Dashboard --> User: Afficher employé modifié

== Suppression d'un Employé ==

User -> Dashboard: Cliquer "Supprimer"
Dashboard -> Dashboard: Confirmer suppression
Dashboard -> EmpClient: deleteEmploye(id)
EmpClient -> API: DELETE /api/employes/[id]
API -> EmpSvc: deleteEmploye(id)
EmpSvc -> DB: DELETE FROM employes WHERE id = ?
DB --> EmpSvc: Success
EmpSvc --> API: Success
API --> EmpClient: Success
EmpClient --> Dashboard: Success
Dashboard -> Dashboard: Rafraîchir liste
Dashboard --> User: Employé supprimé

== Statistiques des Employés ==

User -> Dashboard: Consulter statistiques
Dashboard -> EmpClient: getEmployeStats()
EmpClient -> API: GET /api/employes/stats
API -> EmpSvc: getEmployeStats()
EmpSvc -> DB: SELECT COUNT(*), departement, statut FROM employes GROUP BY ...
DB --> EmpSvc: Stats data
EmpSvc --> API: Stats object
API --> EmpClient: Stats object
EmpClient --> Dashboard: Stats object
Dashboard --> User: Afficher statistiques

@enduml 