@startuml "Diagramme de Classes - Système de Gestion Ministérielle"

!theme plain
skinparam backgroundColor #FFFFFF
skinparam class {
  BackgroundColor #F3F4F6
  BorderColor #374151
  FontColor #1F2937
}
skinparam interface {
  BackgroundColor #E0F2FE
  BorderColor #0288D1
  FontColor #01579B
}

title "Diagramme de Classes - Système de Gestion Ministérielle"

' Package Authentification
package "Authentification" {
  class User {
    +id: number
    +email: string
    +full_name: string
    +role: 'admin' | 'manager' | 'user'
    +department?: string
    +phone?: string
    +is_active: boolean
    +last_login?: string
    +created_at: string
    +updated_at: string
    --
    +authenticate(email: string, password: string): User | null
    +hasPermission(resource: string, action: string): boolean
  }

  class AuthService {
    +signIn(email: string, password: string): Promise<User>
    +signUp(email: string, password: string, fullName: string): Promise<User>
    +signOut(): Promise<void>
    +getCurrentUser(): Promise<User | null>
  }

  class AuthMySQLService {
    +authenticateUser(email: string, password: string): Promise<User | null>
    +createUser(userData: CreateUserData): Promise<User | null>
    +getUserById(id: number): Promise<User | null>
    +updateUser(id: number, updates: Partial<User>): Promise<User | null>
    +changePassword(id: number, currentPassword: string, newPassword: string): Promise<boolean>
    +deactivateUser(id: number): Promise<boolean>
    +getAllUsers(): Promise<User[]>
    +hasPermission(user: User, resource: string, action: string): boolean
  }
}

' Package Gestion des Employés
package "Gestion des Employés" {
  class Employe {
    +id: number
    +nom: string
    +prenom: string
    +email: string
    +telephone: string
    +poste: string
    +departement: string
    +date_embauche: string
    +salaire: number
    +statut: 'actif' | 'inactif' | 'conge'
    +skills?: string[]
    +manager_id?: number
    +created_by?: number
    +created_at: string
    +updated_at: string
    --
    +calculateAnciennete(): number
    +getFullName(): string
  }

  class EmployeService {
    +getAllEmployes(): Promise<Employe[]>
    +createEmploye(data: Employe, userId: number): Promise<Employe>
    +updateEmploye(id: number, data: Partial<Employe>): Promise<Employe>
    +deleteEmploye(id: number): Promise<boolean>
    +getEmployeById(id: number): Promise<Employe | null>
    +getEmployeStats(): Promise<EmployeStats>
    +getDepartements(): Promise<string[]>
    +getPostes(): Promise<string[]>
  }

  class EmployeClient {
    +getAllEmployes(): Promise<Employe[]>
    +getEmployeStats(): Promise<any>
    +getDepartements(): Promise<string[]>
    +getPostes(): Promise<string[]>
    +calculateAnciennete(date_embauche: string): number
  }
}

' Package Gestion des Marchés
package "Gestion des Marchés" {
  class Marche {
    +id: number
    +nom: string
    +description: string
    +date_debut: string
    +date_fin: string
    +budget: number
    +statut: 'actif' | 'termine' | 'suspendu'
    +priority: 'low' | 'medium' | 'high'
    +progress: number
    +created_by?: number
    +created_at: string
    +updated_at: string
    --
    +calculateProgress(): number
    +isOverdue(): boolean
    +getRemainingBudget(): number
  }

  class MarcheService {
    +getAllMarches(): Promise<Marche[]>
    +createMarche(data: Marche, userId: number): Promise<Marche>
    +updateMarche(id: number, data: Partial<Marche>): Promise<Marche>
    +deleteMarche(id: number): Promise<boolean>
    +getMarcheById(id: number): Promise<Marche | null>
    +getMarcheStats(): Promise<MarcheStats>
  }

  class BandeLivraison {
    +id: number
    +nom: string
    +description: string
    +marche_id: number
    +date_livraison: string
    +statut: 'en_attente' | 'en_cours' | 'livree' | 'retard'
    +montant: number
    +fournisseur: string
    +created_by?: number
    +created_at: string
    +updated_at: string
  }
}

' Package Gestion du Stock
package "Gestion du Stock" {
  class Materiel {
    +id: number
    +nom: string
    +description: string
    +quantite: number
    +prix_unitaire: number
    +statut: 'disponible' | 'affecte' | 'maintenance' | 'hors_service' | 'en_transit'
    +category: string
    +location: string
    +serial_number?: string
    +warranty_date?: string
    +fournisseur_id?: number
    +seuil_alerte: number
    +unite: string
    +code_barre?: string
    +marche_id?: number
    +employe_id?: number
    +created_by?: number
    +created_at: string
    +updated_at: string
    --
    +getValeurTotale(): number
    +isEnRupture(): boolean
    +getStatutBadge(): {label: string, variant: string}
  }

  class StockService {
    +getAllMateriels(): Promise<Materiel[]>
    +createMateriel(data: Materiel, userId: number): Promise<Materiel>
    +updateMateriel(id: number, data: Partial<Materiel>): Promise<Materiel>
    +deleteMateriel(id: number): Promise<boolean>
    +getMaterielById(id: number): Promise<Materiel | null>
    +affecterMateriel(materielId: number, employeId: number): Promise<boolean>
    +retournerMateriel(materielId: number): Promise<boolean>
    +getStockStats(): Promise<StockStats>
    +getCategories(): Promise<string[]>
    +getFournisseurs(): Promise<Fournisseur[]>
  }

  class StockClient {
    +getAllMateriels(): Promise<Materiel[]>
    +createMateriel(data: Materiel): Promise<Materiel>
    +updateMateriel(id: number, data: Partial<Materiel>): Promise<Materiel>
    +deleteMateriel(id: number): Promise<boolean>
    +getStatutBadge(materiel: Materiel): {label: string, variant: string}
  }

  class CategorieMateriel {
    +id: number
    +nom: string
    +description?: string
    +couleur: string
    +icone?: string
    +parent_id?: number
    +created_at: string
  }

  class Fournisseur {
    +id: number
    +nom: string
    +email: string
    +telephone: string
    +adresse: string
    +ville: string
    +code_postal: string
    +pays: string
    +siret?: string
    +statut: 'actif' | 'inactif'
    +notes?: string
    +created_at: string
    +updated_at: string
  }

  class MouvementStock {
    +id: number
    +materiel_id: number
    +type: 'entree' | 'sortie' | 'transfert' | 'ajustement' | 'affectation' | 'retour'
    +quantite: number
    +quantite_avant: number
    +quantite_apres: number
    +raison: string
    +reference?: string
    +employe_id?: number
    +fournisseur_id?: number
    +marche_id?: number
    +location_source?: string
    +location_destination?: string
    +created_by?: number
    +created_at: string
  }
}

' Package Base de Données
package "Base de Données" {
  class Database {
    +pool: Pool
    --
    +executeQuery(sql: string, params?: any[]): Promise<any>
    +initializeDatabase(): Promise<void>
    +testConnection(): Promise<boolean>
  }
}

' Package Interface Utilisateur
package "Interface Utilisateur" {
  class AuthProvider {
    +user: User | null
    +loading: boolean
    --
    +signIn(email: string, password: string): Promise<void>
    +signOut(): Promise<void>
    +signUp(email: string, password: string, fullName: string): Promise<void>
  }

  class LoadingSpinner {
    +size: 'sm' | 'md' | 'lg'
    +text?: string
    +className?: string
  }

  class MinistryHeader {
    +user: User | null
    --
    +getRoleIcon(role: string): JSX.Element
    +getRoleBadge(role: string): JSX.Element
  }
}

' Package API Routes
package "API Routes" {
  class AuthAPI {
    +POST /api/auth/login
    +POST /api/auth/register
  }

  class EmployesAPI {
    +GET /api/employes
    +POST /api/employes
    +PUT /api/employes/[id]
    +DELETE /api/employes/[id]
    +GET /api/employes/stats
  }

  class MarchesAPI {
    +GET /api/marches
    +POST /api/marches
    +PUT /api/marches/[id]
    +DELETE /api/marches/[id]
  }

  class StockAPI {
    +GET /api/stock/materiels
    +POST /api/stock/materiels
    +PUT /api/stock/materiels/[id]
    +DELETE /api/stock/materiels/[id]
    +GET /api/stock/fournisseurs
  }

  class DashboardAPI {
    +GET /api/dashboard/stats
  }
}

' Relations
User ||--o{ Employe : "crée"
User ||--o{ Marche : "crée"
User ||--o{ Materiel : "crée"
User ||--o{ MouvementStock : "effectue"

Employe ||--o{ Employe : "gère"
Employe ||--o{ Materiel : "utilise"
Employe ||--o{ MouvementStock : "effectue"

Marche ||--o{ BandeLivraison : "contient"
Marche ||--o{ Materiel : "utilise"
Marche ||--o{ MouvementStock : "implique"

Materiel ||--o{ MouvementStock : "génère"
CategorieMateriel ||--o{ Materiel : "catégorise"
Fournisseur ||--o{ Materiel : "fournit"
Fournisseur ||--o{ MouvementStock : "implique"

AuthService --> AuthMySQLService : "utilise"
EmployeService --> Database : "utilise"
MarcheService --> Database : "utilise"
StockService --> Database : "utilise"

EmployeClient --> EmployesAPI : "appelle"
StockClient --> StockAPI : "appelle"

AuthProvider --> AuthService : "utilise"
MinistryHeader --> AuthProvider : "utilise"

@enduml 