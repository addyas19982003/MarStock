import mysql from 'mysql2/promise'

const dbConfig = {
  host: process.env.DB_HOST || 'localhost',
  port: parseInt(process.env.DB_PORT || '3306'),
  user: process.env.DB_USER || 'root',
  password: process.env.DB_PASSWORD || '',
  database: process.env.DB_NAME || 'ms',
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0
}

async function executeQuery(query, params = []) {
  const pool = mysql.createPool(dbConfig)
  try {
    const [rows] = await pool.execute(query, params)
    return rows
  } finally {
    await pool.end()
  }
}

async function forceSeedData() {
  try {
    console.log('üå± Insertion forc√©e des donn√©es de test...')

    // Ins√©rer des grades de test
    console.log('üìù Insertion des grades...')
    await executeQuery(`
      INSERT IGNORE INTO grades (nom, niveau, salaire_base, description) VALUES
      ('Agent', 'A1', 8000.00, 'Grade de base pour les agents administratifs'),
      ('Agent Principal', 'A2', 10000.00, 'Grade interm√©diaire pour les agents exp√©riment√©s'),
      ('Chef de Bureau', 'B1', 15000.00, 'Grade de supervision pour les chefs de bureau'),
      ('Chef de Service', 'B2', 20000.00, 'Grade de direction pour les chefs de service'),
      ('Directeur', 'C1', 30000.00, 'Grade de direction g√©n√©rale')
    `)

    // Ins√©rer des √©tages de test
    console.log('üè¢ Insertion des √©tages...')
    await executeQuery(`
      INSERT IGNORE INTO etages (numero, nom, description, superficie) VALUES
      (1, 'Rez-de-chauss√©e', '√âtage d''accueil et services publics', 1500.00),
      (2, 'Premier √©tage', '√âtage administratif et bureaux', 1200.00),
      (3, 'Deuxi√®me √©tage', '√âtage des services techniques', 1200.00),
      (4, 'Troisi√®me √©tage', '√âtage de direction', 1000.00)
    `)

    // Ins√©rer des directions de test
    console.log('üèõÔ∏è Insertion des directions...')
    await executeQuery(`
      INSERT IGNORE INTO directions (nom, code, budget, description) VALUES
      ('Direction des Ressources Humaines', 'DRH', 500000.00, 'Gestion du personnel et des ressources humaines'),
      ('Direction Administrative et Financi√®re', 'DAF', 800000.00, 'Gestion administrative et financi√®re'),
      ('Direction Technique', 'DT', 1200000.00, 'Gestion technique et maintenance'),
      ('Direction de la Communication', 'DC', 300000.00, 'Communication et relations publiques')
    `)

    // Ins√©rer des divisions de test
    console.log('üìã Insertion des divisions...')
    await executeQuery(`
      INSERT IGNORE INTO divisions (nom, code, direction_id, description) VALUES
      ('Division Recrutement', 'DRH-REC', 1, 'Recrutement et s√©lection du personnel'),
      ('Division Formation', 'DRH-FORM', 1, 'Formation et d√©veloppement des comp√©tences'),
      ('Division Comptabilit√©', 'DAF-COMP', 2, 'Comptabilit√© et gestion financi√®re'),
      ('Division Budget', 'DAF-BUDG', 2, 'Gestion budg√©taire et contr√¥le'),
      ('Division Maintenance', 'DT-MAINT', 3, 'Maintenance des √©quipements'),
      ('Division Informatique', 'DT-INFO', 3, 'Gestion informatique et syst√®mes')
    `)

    // Ins√©rer des bureaux de test
    console.log('üè¢ Insertion des bureaux...')
    await executeQuery(`
      INSERT IGNORE INTO bureaux (nom, numero, etage, division_id, capacite, equipements) VALUES
      ('Bureau Accueil', 'A01', 1, 1, 4, 'Ordinateurs, imprimantes, t√©l√©phones'),
      ('Bureau RH', 'A02', 1, 1, 6, 'Ordinateurs, imprimantes, classeurs'),
      ('Bureau Comptabilit√©', 'B01', 2, 3, 8, 'Ordinateurs, imprimantes, logiciels comptables'),
      ('Bureau Budget', 'B02', 2, 4, 6, 'Ordinateurs, imprimantes, logiciels Excel'),
      ('Bureau Maintenance', 'C01', 3, 5, 4, 'Ordinateurs, outils, √©quipements techniques'),
      ('Bureau Informatique', 'C02', 3, 6, 6, 'Ordinateurs, serveurs, √©quipements r√©seau')
    `)

    console.log('‚úÖ Donn√©es de test ins√©r√©es avec succ√®s!')
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'insertion des donn√©es:', error)
  }
}

forceSeedData() 